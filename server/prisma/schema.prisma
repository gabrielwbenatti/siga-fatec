// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id       Int    @id @default(autoincrement())
  username String @db.VarChar(63)
  email    String @db.VarChar(127)
  password String @db.VarChar(255)

  teacher teachers[]
  student students[]
}

model teachers {
  id          Int       @id @default(autoincrement())
  user_id     Int
  teach_since DateTime? @db.Date
  document    String?   @db.VarChar(63)
  first_name  String    @db.VarChar(255)
  last_name   String    @db.VarChar(255)

  user    users     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  classes classes[]
}

model students {
  id         Int    @id @default(autoincrement())
  first_name String @db.VarChar(255)
  last_name  String @db.VarChar(255)
  user_id    Int

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  exam_submissions    exam_submissions[]
  class_students      class_students[]
  planning_attendance planning_attendances[]
}

model courses {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(127)
  abbreviation String @db.VarChar(15)

  disciplines disciplines[]
}

model disciplines {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(127)
  abbreviation String @db.VarChar(15)
  course_id    Int

  course  courses   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classes classes[]
}

model classes {
  id            Int      @id @default(autoincrement())
  teacher_id    Int
  discipline_id Int
  semester      Int      @db.SmallInt
  year          Int      @db.SmallInt
  finished      Boolean? @default(false)

  teacher    teachers    @relation(fields: [teacher_id], references: [id], onUpdate: Cascade)
  discipline disciplines @relation(fields: [discipline_id], references: [id], onUpdate: Cascade)

  class_materials      class_materials[]
  class_plans          class_plans[]
  exams                exams[]
  class_students       class_students[]
  class_schedules      class_schedules[]
  planning_attendances planning_attendances[]
}

model class_schedules {
  id          Int    @id @default(autoincrement())
  class_id    Int
  day_of_week Int
  start_time  String @db.Char(5) // HH:mm
  end_time    String @db.Char(5) // HH:mm

  class               classes                @relation(fields: [class_id], references: [id])
  planning_attendance planning_attendances[]
}

model class_materials {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(255)
  description String? @db.Text
  file_format String? @db.VarChar(7)
  file_url    String? @db.VarChar(255)
  list_index  Int     @db.SmallInt
  class_id    Int

  class classes @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model class_plans {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  description  String    @db.Text
  planned_date DateTime  @db.Date
  applied_date DateTime? @db.Date
  class_id     Int

  class classes @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model planning_attendances {
  id                Int     @id @default(autoincrement())
  class_id          Int
  class_schedule_id Int
  student_id        Int
  is_present        Boolean @default(true)

  class          classes         @relation(fields: [class_id], references: [id])
  class_schedule class_schedules @relation(fields: [class_schedule_id], references: [id])
  student        students        @relation(fields: [student_id], references: [id])

  @@unique([class_id, class_schedule_id, student_id])
}

model exams {
  id           Int       @id @default(autoincrement())
  class_id     Int
  title        String    @db.VarChar(255)
  description  String?   @db.Text
  planned_date DateTime  @db.Date
  applied_date DateTime? @db.Date

  class            classes            @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exam_submissions exam_submissions[]
}

model exam_submissions {
  id            Int     @id @default(autoincrement())
  class_exam_id Int
  student_id    Int
  score         Decimal @default(0.00) @db.Decimal(10, 2)

  class_exam exams    @relation(fields: [class_exam_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student    students @relation(fields: [student_id], references: [id], onUpdate: Cascade)
}

model class_students {
  id         Int @id @default(autoincrement())
  class_id   Int
  student_id Int

  class   classes  @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student students @relation(fields: [student_id], references: [id], onUpdate: Cascade)
}
